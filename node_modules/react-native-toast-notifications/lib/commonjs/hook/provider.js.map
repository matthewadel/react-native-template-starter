{"version":3,"sources":["provider.tsx"],"names":["ToastProvider","children","props","toastRef","refState","setRefState","current"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAMA,MAAMA,aAAoC,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA4B;AACvE,QAAMC,QAAQ,GAAG,mBAAO,IAAP,CAAjB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B,qBAAS,EAAT,CAAhC;AAEA,wBAAU,MAAM;AACdA,IAAAA,WAAW,CAACF,QAAQ,CAACG,OAAV,CAAX;AACD,GAFD,EAEG,EAFH;AAIA,sBACE,6BAAC,gBAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEF;AAA9B,KACGH,QADH,eAEE,6BAAC,uBAAD;AAAO,IAAA,GAAG,EAAEE;AAAZ,KAA0BD,KAA1B,EAFF,CADF;AAMD,CAdD;;eAgBeF,a","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport ToastContext from \"./context\";\r\nimport Toast, { Props } from \"../toast-container\";\r\n\r\ntype PropsWithChildren = Props & {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ToastProvider: FC<PropsWithChildren> = ({ children, ...props }) => {\r\n  const toastRef = useRef(null);\r\n  const [refState, setRefState] = useState({});\r\n\r\n  useEffect(() => {\r\n    setRefState(toastRef.current as any);\r\n  }, []);\r\n\r\n  return (\r\n    <ToastContext.Provider value={refState as any}>\r\n      {children}\r\n      <Toast ref={toastRef} {...props} />\r\n    </ToastContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ToastProvider;\r\n"]}